name: Test

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

env:
  DATE: ${{ github.event.repository.updated_at }}  # Set the cache date dynamically

jobs:
  test:
    strategy:
      matrix:
        os: [windows-latest]
        python-version: [3.12]
        label: [win-64]
        prefix: [C:\Miniconda3\envs\dragonbornleveler]
    # strategy:
    #   matrix:
    #     os: [windows-latest]  # Multi-OS testing #[ubuntu-latest, windows-latest, macos-latest, self-hosted]
    #     python-version: [3.12]  # Test with multiple Python versions

    runs-on: ${{ matrix.os }}

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v3
        with:
            miniforge-variant: Mambaforge
            miniforge-version: latest
            activate-environment: dragonbornleveler
            use-mamba: true

      # Step 2: Set up caching for the Conda env
      # - name: Cache conda environment
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ${{ runner.os == 'Windows' && 'C:\\Miniconda3\\envs\\dragonbornleveler' }}
      #       ${{ runner.os == 'Linux' && '~/miniconda3/envs/dragonbornleveler' }}
      #     key: conda-${{ runner.os }}-Python${{ matrix.python-version }}-${{ hashFiles('environment.yml') }}

      # Cache Conda package cache, so environment setup is faster
      - name: Cache conda environment
        uses: actions/cache@v3
        with:
          path: ${{ matrix.prefix }} #C:/Miniconda3/envs/dragonbornleveler
          key: conda-${{ runner.os }}-Python${{ matrix.python-version }}-${{ hashFiles('environment.yml') }}
        id: cache


      # Step 3: Set up Miniconda and the environment
      # - name: Set up Miniconda
      #   uses: conda-incubator/setup-miniconda@v3
      #   with:
      #     python-version: ${{ matrix.python-version }}
      #     mamba-version: "*"  # Use Mamba for faster installs
      #     channels: conda-forge,defaults
      #     channel-priority: true
      #     activate-environment: dragonbornleveler  # Your environment name
      #     environment-file: environment.yml
      #     use-mamba: true  # Use Mamba for the initial setup

      # Step 4: Cache pip packages
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.os == 'Windows' && 'C:\\Users\\runneradmin\\AppData\\Local\\pip\\Cache' }}
            ${{ runner.os == 'Linux' && '~/.cache/pip' }}
          key: pip-${{ runner.os }}-Python${{ matrix.python-version }}-${{ hashFiles('environment.yml') }}

      - name: Update environment
        run: mamba env update -n dragonbornleveler -f dragonbornleveler.yml
        if: steps.cache.outputs.cache-hit != 'true'

      # Step 5: Cache Tesseract installation to avoid reinstalling it every time (Windows only)
      - name: Cache Tesseract installation
        id: tesseract-cache
        uses: actions/cache@v3
        with:
          path: C:/Program Files/Tesseract-OCR
          key: tesseract-${{ runner.os }}
        if: matrix.os == 'windows-latest'

      # Step 6: Install Tesseract if not cached (Windows only)
      - name: Install Tesseract-OCR
        if: steps.tesseract-cache.outputs.cache-hit != 'true' && matrix.os == 'windows-latest'
        run: choco install tesseract

      # Step 7: Add Tesseract to PATH (Windows only)
      - name: Add Tesseract to PATH
        run: echo "C:\Program Files\Tesseract-OCR" | Out-File -Append -FilePath $env:GITHUB_PATH
        if: matrix.os == 'windows-latest'

      # Step 8: Verify Conda installation and packages
      - name: Verify Conda setup
        run: |
          conda info
          conda list

      # Step 9: Run unit tests
      - name: Run tests
        run: |
          conda activate dragonbornleveler
          pytest  # Replace with your testing framework, if different