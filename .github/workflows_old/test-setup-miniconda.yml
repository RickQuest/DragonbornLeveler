# name: Test setup-miniconda

# on:
#   push:
#     branches:
#       - main
#     tags:
#       - 'v*.*.*'
#   pull_request:
#     branches:
#       - main

# env:
#   CACHE_NUMBER: 0  # Increase to reset cache manually

# jobs:
#   test:
#     strategy:
#       matrix:
#         include:
#           # - os: ubuntu-latest
#           #   label: linux-64
#           #   prefix: /usr/share/miniconda3/envs/dragonbornleveler
#           # - os: macos-latest
#           #   label: osx-64
#           #   prefix: /Users/runner/miniconda3/envs/dragonbornleveler
#           - os: windows-latest
#             label: win-64
#             prefix: C:/Miniconda3/envs/dragonbornleveler

#     name: ${{ matrix.label }}  # Display the job name based on the OS label
#     runs-on: ${{ matrix.os }}

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Set up Miniconda with caching
#       - name: Set up Miniconda
#         uses: conda-incubator/setup-miniconda@v2
#         with:
#           activate-environment: dragonbornleveler
#           python-version: 3.8
#           auto-update-conda: true

#       # Cache Conda environment
#       - name: Cache Conda environment
#         uses: actions/cache@v3
#         with:
#           path: ${{ matrix.prefix }}
#           key: ${{ matrix.os }}-conda-${{ hashFiles('environment.yml') }}-${{ env.CACHE_NUMBER }}
#           restore-keys: |
#             ${{ matrix.os }}-conda-

#       # Install Conda dependencies if the cache is not hit
#       - name: Update environment
#         run: conda env update -n dragonbornleveler -f environment.yml
#         if: steps.cache.outputs.cache-hit != 'true'

#       # Cache Tesseract installation (Windows only)
#       - name: Cache Tesseract installation
#         id: tesseract-cache
#         uses: actions/cache@v3
#         with:
#           path: C:/Program Files/Tesseract-OCR
#           key: windows-tesseract-${{ env.DATE }}-${{ env.CACHE_NUMBER }}
#         if: matrix.os == 'windows-latest'

#       # Install Tesseract if not cached (Windows only)
#       - name: Install Tesseract-OCR
#         if: steps.tesseract-cache.outputs.cache-hit != 'true' && matrix.os == 'windows-latest'
#         run: choco install tesseract

#       # Add Tesseract to PATH (Windows only)
#       - name: Add Tesseract to PATH
#         run: echo "C:\Program Files\Tesseract-OCR" | Out-File -Append -FilePath $env:GITHUB_PATH
#         if: matrix.os == 'windows-latest'

#       # Run unit tests
#       - name: Run unit tests
#         run: |
#           conda activate dragonbornleveler
#           pytest

#   build:
#     runs-on: windows-latest
#     needs: test  # Only run the build after tests are successful
#     if: startsWith(github.ref, 'refs/tags')  # Run only on tag pushes (release process)

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Set up Miniconda
#       - name: Set up Miniconda
#         uses: conda-incubator/setup-miniconda@v2
#         with:
#           activate-environment: dragonbornleveler
#           python-version: 3.8
#           auto-update-conda: true

#       # Build executable with PyInstaller
#       - name: Build executable with PyInstaller
#         run: |
#           conda activate dragonbornleveler
#           pyinstaller main.spec

#       # Upload the built executable as an artifact
#       - name: Upload executable artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: built-executable
#           path: dist/DragonbornLeveler.exe

#       # Create a GitHub release using the built executable
#       - name: Create GitHub Release
#         uses: softprops/action-gh-release@v1
#         with:
#           files: dist/DragonbornLeveler.exe
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
